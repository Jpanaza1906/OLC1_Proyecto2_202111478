/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,11],$V1=[1,10],$V2=[1,12],$V3=[1,13],$V4=[1,14],$V5=[1,15],$V6=[1,16],$V7=[1,17],$V8=[5,13,14,26,29,30,31,32,33],$V9=[1,23],$Va=[14,16,63],$Vb=[2,20],$Vc=[1,26],$Vd=[1,29],$Ve=[1,30],$Vf=[1,31],$Vg=[1,32],$Vh=[1,33],$Vi=[1,34],$Vj=[1,35],$Vk=[1,36],$Vl=[1,37],$Vm=[1,38],$Vn=[1,52],$Vo=[1,53],$Vp=[1,45],$Vq=[1,46],$Vr=[1,47],$Vs=[1,48],$Vt=[1,49],$Vu=[1,50],$Vv=[1,51],$Vw=[1,54],$Vx=[1,55],$Vy=[1,56],$Vz=[1,57],$VA=[1,58],$VB=[1,59],$VC=[8,16,24,54,62,63,67,68,69,70,71,72,73,74,75,76,77,78,80],$VD=[1,71],$VE=[16,24],$VF=[8,16,24,54,77,78],$VG=[1,95],$VH=[8,16,24,54,62,63,67,68,69,74,75,76,77,78,80],$VI=[8,16,24,54,62,63,67,68,69,70,71,73,74,75,76,77,78,80],$VJ=[8,16,24,54,62,63,68,74,75,76,77,78,80],$VK=[1,117],$VL=[1,115],$VM=[1,118],$VN=[1,119],$VO=[1,124],$VP=[1,120],$VQ=[1,121],$VR=[1,122],$VS=[1,123],$VT=[14,19,22,29,30,31,32,33,45,46,50,55,58,59,60,61],$VU=[1,137],$VV=[1,141],$VW=[1,142],$VX=[8,16],$VY=[2,43],$VZ=[14,22,29,30,31,32,33,45,46,50,58,59,60,61],$V_=[1,193],$V$=[1,194],$V01=[19,56,57],$V11=[1,213],$V21=[14,19,22,29,30,31,32,33,45,46,47,50,55,58,59,60,61];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"OPCIONESCUERPO":4,"EOF":5,"CUERPO":6,"DEC_VAR":7,"ptcoma":8,"ASIG_VAR":9,"METODOS":10,"FUNCIONES":11,"MAIN":12,"Rvoid":13,"identificador":14,"parA":15,"parC":16,"llaveA":17,"INSTRUCCIONES":18,"llaveC":19,"LIST_PARAMETROS":20,"TIPO":21,"Rreturn":22,"EXPRESION":23,"coma":24,"PARAMETROS":25,"Rmain":26,"PARAMETROS_LLAMADA":27,"igual":28,"Rint":29,"Rdouble":30,"Rchar":31,"Rboolean":32,"Rstring":33,"INSTRUCCION":34,"METODO_INSTR_SINPARAMETROS":35,"METODO_INSTR_PARAMETROS":36,"PRINT":37,"IF":38,"FOR":39,"WHILE":40,"DOWHILE":41,"INCREMENTOYDECREMENTO":42,"LISTA":43,"SWITCH":44,"Rprint":45,"Rif":46,"Relse":47,"ELSEIF":48,"CONEIF":49,"Rswitch":50,"CASES":51,"CASEN":52,"CASE":53,"dospuntos":54,"Rbreak":55,"Rcase":56,"Rdefault":57,"Rfor":58,"Rwhile":59,"Rdo":60,"Rlist":61,"menor":62,"mayor":63,"Rnew":64,"masmas":65,"menosmenos":66,"suma":67,"inter":68,"menos":69,"multi":70,"div":71,"exponente":72,"modulo":73,"menorIgual":74,"mayorIgual":75,"diferente":76,"and":77,"or":78,"not":79,"igualigual":80,"decimal":81,"entero":82,"Rtrue":83,"Rfalse":84,"string":85,"char":86,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"ptcoma",13:"Rvoid",14:"identificador",15:"parA",16:"parC",17:"llaveA",19:"llaveC",22:"Rreturn",24:"coma",26:"Rmain",28:"igual",29:"Rint",30:"Rdouble",31:"Rchar",32:"Rboolean",33:"Rstring",45:"Rprint",46:"Rif",47:"Relse",50:"Rswitch",54:"dospuntos",55:"Rbreak",56:"Rcase",57:"Rdefault",58:"Rfor",59:"Rwhile",60:"Rdo",61:"Rlist",62:"menor",63:"mayor",64:"Rnew",65:"masmas",66:"menosmenos",67:"suma",68:"inter",69:"menos",70:"multi",71:"div",72:"exponente",73:"modulo",74:"menorIgual",75:"mayorIgual",76:"diferente",77:"and",78:"or",79:"not",80:"igualigual",81:"decimal",82:"entero",83:"Rtrue",84:"Rfalse",85:"string",86:"char"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,1],[6,1],[6,1],[10,7],[10,8],[11,11],[11,10],[20,3],[20,1],[25,2],[12,5],[12,6],[27,3],[27,1],[7,2],[7,4],[9,3],[21,1],[21,1],[21,1],[21,1],[21,1],[18,2],[18,1],[34,2],[34,2],[34,2],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,2],[34,1],[34,1],[34,2],[34,3],[35,3],[36,5],[37,5],[38,7],[38,11],[38,8],[38,12],[48,2],[48,1],[49,8],[44,7],[51,2],[51,1],[52,5],[53,2],[53,1],[39,11],[40,7],[41,9],[43,12],[42,2],[42,2],[23,3],[23,4],[23,4],[23,5],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,2],[23,2],[23,3],[23,3],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2: case 51: case 55:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 3: case 14: case 52:
this.$=[$$[$0]];
break;
case 4: case 5: case 30: case 31: case 32: case 39:
this.$=$$[$0-1];
break;
case 6: case 7: case 8: case 33: case 34: case 35: case 36: case 37: case 38: case 40: case 41:
this.$=$$[$0];
break;
case 9:
this.$ = INSTRUCCION.nuevoMetodo($$[$0-5], null, $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 10:
this.$ = INSTRUCCION.nuevoMetodo($$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 11:
this.$ = INSTRUCCION.nuevaFuncion($$[$0-10],$$[$0-9],$$[$0-7],$$[$0-4],$$[$0-2], this._$.first_line , this._$.first_column+1)
break;
case 12:
this.$ = INSTRUCCION.nuevaFuncion($$[$0-9],$$[$0-8],$$[$0-6],null,$$[$0-2], this._$.first_line , this._$.first_column+1)
break;
case 13:
$$[$0-2].push($$[$0]); this.$=$$[$0-2];
break;
case 15:
this.$ = INSTRUCCION.nuevaDeclaracion($$[$0], null, $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 16:
this.$ = INSTRUCCION.nuevoMain($$[$0-3], null, this._$.first_line,this._$.first_column+1)
break;
case 17:
this.$ = INSTRUCCION.nuevoMain($$[$0-4], $$[$0-2], this._$.first_line,this._$.first_column+1)
break;
case 18:
this.$ = $$[$0-2]; $$[$0-2].push($$[$0]);
break;
case 19: case 29: case 56:
this.$ = [$$[$0]];
break;
case 20:
this.$= INSTRUCCION.nuevaDeclaracion($$[$0],null, $$[$0-1],this._$.first_line, this._$.first_column+1)
break;
case 21:
this.$= INSTRUCCION.nuevaDeclaracion($$[$0-2], $$[$0], $$[$0-3],this._$.first_line, this._$.first_column+1);
break;
case 22:
this.$ = INSTRUCCION.nuevaAsignacion($$[$0-2], $$[$0],this._$.first_line, this._$.first_column+1)
break;
case 23:
this.$= TIPO_DATO.ENTERO
break;
case 24:
this.$= TIPO_DATO.DECIMAL
break;
case 25:
this.$= TIPO_DATO.CHAR
break;
case 26:
this.$= TIPO_DATO.BOOL
break;
case 27:
this.$= TIPO_DATO.CADENA
break;
case 28:
this.$ = $$[$0-1]; $$[$0-1].push($$[$0]);
break;
case 42:
this.$ = INSTRUCCION.nuevoReturn(null, this._$.first_line,this._$.first_column+1)
break;
case 43:
this.$ = INSTRUCCION.nuevoReturn($$[$0-1], this._$.first_line,this._$.first_column+1) 
break;
case 44:
 this.$ = INSTRUCCION.nuevoEjecMetodo($$[$0-2], null, this._$.first_line,this._$.first_column+1) 
break;
case 45:
 this.$ = INSTRUCCION.nuevoEjecMetodo($$[$0-4], $$[$0-2], this._$.first_line,this._$.first_column+1) 
break;
case 46:
this.$ = INSTRUCCION.nuevoPrint($$[$0-2], this._$.first_line,this._$.first_column+1);
break;
case 47:
this.$ = INSTRUCCION.nuevoIf($$[$0-4], $$[$0-1], this._$.first_line, this._$.first_column+1);
break;
case 48:
this.$ = INSTRUCCION.nuevoIfElse($$[$0-8], $$[$0-5], $$[$0-1] , this._$.first_line,this._$.first_column+1)
break;
case 49:
this.$= INSTRUCCION.nuevoIfConElseIf($$[$0-5], $$[$0-2], $$[$0], null, this._$.first_line,this._$.first_column+1)
break;
case 50:
this.$= INSTRUCCION.nuevoIfConElseIf($$[$0-9], $$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 53:
this.$ = INSTRUCCION.nuevoElseIf($$[$0-4], $$[$0-1], this._$.first_line, this._$.first_column+1) 
break;
case 54:
this.$ = INSTRUCCION.nuevoSwitch($$[$0-4], $$[$0-1], this._$.first_line, this._$.first_column+1)
break;
case 57:
 this.$ = INSTRUCCION.nuevoCase($$[$0-4], $$[$0-2], this._$.first_line, this._$.first_column+1);
break;
case 58:
this.$ = $$[$0];
break;
case 59:
this.$ = {valor:$$[$0]};
break;
case 60:
this.$ = INSTRUCCION.nuevoFor($$[$0-8], $$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line, this._$.first_column+1)
break;
case 61:
this.$ = INSTRUCCION.nuevoWhile($$[$0-4], $$[$0-1], this._$.first_line, this._$.first_column+1);
break;
case 62:
this.$ = INSTRUCCION.nuevoDoWhile($$[$0-2], $$[$0-6], this._$.first_line, this._$.first_column+1);
break;
case 63:
this.$= INSTRUCCION.nuevoLista($$[$0-7], $$[$0-9], this._$.first_line, this._$.first_column+1)
break;
case 64:
this.$ =  INSTRUCCION.nuevoIncremento($$[$0-1], $$[$0], INSTRUCCION.nuevaOperacionBinaria($$[$0-1], 1 ,TIPO_OPERACION.SUMA, this._$.first_line, this._$.first_column+1), this._$.first_line, this._$.first_column+1)
break;
case 65:
this.$ =  INSTRUCCION.nuevoDecremento($$[$0-1], $$[$0], INSTRUCCION.nuevaOperacionBinaria($$[$0-1], 1, TIPO_OPERACION.RESTA, this._$.first_line, this._$.first_column+1), this._$.first_line, this._$.first_column+1)
break;
case 66:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.SUMA,this._$.first_line, this._$.first_column+1);
break;
case 67:
 this.$ = INSTRUCCION.nuevaEjecFuncion($$[$0-3], $$[$0-1], this._$.first_line,this._$.first_column+1) 
break;
case 68:
this.$ = INSTRUCCION.nuevoCasteo($$[$0-2],$$[$0],this._$.first_line, this._$.first_column+1);
break;
case 69:
this.$ = INSTRUCCION.nuevoTernario($$[$0-4], $$[$0-2], $$[$0], TIPO_OPERACION.TERNARIO,this._$.first_line, this._$.first_column+1);
break;
case 70:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.RESTA,this._$.first_line, this._$.first_column+1);
break;
case 71:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MULTIPLICACION,this._$.first_line, this._$.first_column+1);
break;
case 72:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.DIVISION,this._$.first_line, this._$.first_column+1);
break;
case 73:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.POTENCIA,this._$.first_line, this._$.first_column+1);
break;
case 74:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MODULO,this._$.first_line, this._$.first_column+1);
break;
case 75:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MENOR,this._$.first_line, this._$.first_column+1);
break;
case 76:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MAYOR,this._$.first_line, this._$.first_column+1);
break;
case 77:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MENORIGUAL,this._$.first_line, this._$.first_column+1);
break;
case 78:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MAYORIGUAL,this._$.first_line, this._$.first_column+1);
break;
case 79:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.DIFERENTE,this._$.first_line, this._$.first_column+1);
break;
case 80:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.AND,this._$.first_line, this._$.first_column+1);
break;
case 81:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.OR,this._$.first_line, this._$.first_column+1);
break;
case 82:
this.$= INSTRUCCION.nuevaOperacionUnaria($$[$0], TIPO_OPERACION.UNARIA,this._$.first_line, this._$.first_column+1);
break;
case 83:
this.$= INSTRUCCION.nuevaOperacionBinaria(null,$$[$0], TIPO_OPERACION.NOT,this._$.first_line, this._$.first_column+1);
break;
case 84:
this.$=$$[$0-1]
break;
case 85:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.IGUALIGUAL,this._$.first_line, this._$.first_column+1);
break;
case 86:
this.$= INSTRUCCION.nuevoValor(Number($$[$0]),TIPO_VALOR.DECIMAL,this._$.first_line, this._$.first_column+1);
break;
case 87:
this.$= INSTRUCCION.nuevoValor(Number($$[$0]),TIPO_VALOR.ENTERO,this._$.first_line, this._$.first_column+1);
break;
case 88: case 89:
this.$= INSTRUCCION.nuevoValor($$[$0],TIPO_VALOR.BOOL,this._$.first_line, this._$.first_column+1);
break;
case 90:
this.$= INSTRUCCION.nuevoValor($$[$0],TIPO_VALOR.CADENA,this._$.first_line, this._$.first_column+1);
break;
case 91:
this.$= INSTRUCCION.nuevoValor($$[$0],TIPO_VALOR.IDENTIFICADOR,this._$.first_line, this._$.first_column+1);
break;
case 92:
this.$= INSTRUCCION.nuevoValor($$[$0],TIPO_VALOR.CHAR,this._$.first_line, this._$.first_column+1);
break;
}
},
table: [{3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:$V0,14:$V1,21:9,26:$V2,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7},{1:[3]},{5:[1,18],6:19,7:4,9:5,10:6,11:7,12:8,13:$V0,14:$V1,21:9,26:$V2,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7},o($V8,[2,3]),{8:[1,20]},{8:[1,21]},o($V8,[2,6]),o($V8,[2,7]),o($V8,[2,8]),{14:[1,22]},{28:$V9},{14:[1,24]},{14:[1,25]},o($Va,[2,23]),o($Va,[2,24]),o($Va,[2,25]),o($Va,[2,26]),o($Va,[2,27]),{1:[2,1]},o($V8,[2,2]),o($V8,[2,4]),o($V8,[2,5]),{8:$Vb,15:[1,27],28:$Vc},{14:$Vd,15:$Ve,23:28,69:$Vf,79:$Vg,81:$Vh,82:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm},{15:[1,39]},{15:[1,40]},{14:$Vd,15:$Ve,23:41,69:$Vf,79:$Vg,81:$Vh,82:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm},{20:42,21:44,25:43,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7},{8:[2,22],62:$Vn,63:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,80:$VB},o($VC,[2,91],{15:[1,60]}),{14:$Vd,15:$Ve,21:61,23:62,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7,69:$Vf,79:$Vg,81:$Vh,82:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm},{14:$Vd,15:$Ve,23:63,69:$Vf,79:$Vg,81:$Vh,82:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm},{14:$Vd,15:$Ve,23:64,69:$Vf,79:$Vg,81:$Vh,82:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm},o($VC,[2,86]),o($VC,[2,87]),o($VC,[2,88]),o($VC,[2,89]),o($VC,[2,90]),o($VC,[2,92]),{16:[1,65],20:66,21:44,25:43,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7},{14:$Vd,15:$Ve,16:[1,67],23:69,27:68,69:$Vf,79:$Vg,81:$Vh,82:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm},{8:[2,21],62:$Vn,63:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,80:$VB},{16:[1,70],24:$VD},o($VE,[2,14]),{14:[1,72]},{14:$Vd,15:$Ve,23:73,69:$Vf,79:$Vg,81:$Vh,82:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm},{14:$Vd,15:$Ve,23:74,69:$Vf,79:$Vg,81:$Vh,82:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm},{14:$Vd,15:$Ve,23:75,69:$Vf,79:$Vg,81:$Vh,82:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm},{14:$Vd,15:$Ve,23:76,69:$Vf,79:$Vg,81:$Vh,82:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm},{14:$Vd,15:$Ve,23:77,69:$Vf,79:$Vg,81:$Vh,82:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm},{14:$Vd,15:$Ve,23:78,69:$Vf,79:$Vg,81:$Vh,82:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm},{14:$Vd,15:$Ve,23:79,69:$Vf,79:$Vg,81:$Vh,82:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm},{14:$Vd,15:$Ve,23:80,69:$Vf,79:$Vg,81:$Vh,82:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm},{14:$Vd,15:$Ve,23:81,69:$Vf,79:$Vg,81:$Vh,82:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm},{14:$Vd,15:$Ve,23:82,69:$Vf,79:$Vg,81:$Vh,82:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm},{14:$Vd,15:$Ve,23:83,69:$Vf,79:$Vg,81:$Vh,82:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm},{14:$Vd,15:$Ve,23:84,69:$Vf,79:$Vg,81:$Vh,82:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm},{14:$Vd,15:$Ve,23:85,69:$Vf,79:$Vg,81:$Vh,82:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm},{14:$Vd,15:$Ve,23:86,69:$Vf,79:$Vg,81:$Vh,82:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm},{14:$Vd,15:$Ve,23:87,69:$Vf,79:$Vg,81:$Vh,82:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm},{14:$Vd,15:$Ve,23:69,27:88,69:$Vf,79:$Vg,81:$Vh,82:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm},{16:[1,89]},{16:[1,90],62:$Vn,63:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,80:$VB},o($VC,[2,82]),o($VF,[2,83],{62:$Vn,63:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,80:$VB}),{17:[1,91]},{16:[1,92],24:$VD},{8:[1,93]},{16:[1,94],24:$VG},o($VE,[2,19],{62:$Vn,63:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,80:$VB}),{17:[1,96]},{21:44,25:97,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7},o($VE,[2,15]),o($VH,[2,66],{70:$Vs,71:$Vt,72:$Vu,73:$Vv}),{54:[1,98],62:$Vn,63:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,80:$VB},o($VH,[2,70],{70:$Vs,71:$Vt,72:$Vu,73:$Vv}),o($VI,[2,71],{72:$Vu}),o($VI,[2,72],{72:$Vu}),o($VI,[2,73]),o($VI,[2,74],{72:$Vu}),o($VJ,[2,75],{67:$Vp,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv}),o($VJ,[2,76],{67:$Vp,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv}),o($VJ,[2,77],{67:$Vp,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv}),o($VJ,[2,78],{67:$Vp,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv}),o($VJ,[2,79],{67:$Vp,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv}),o($VF,[2,80],{62:$Vn,63:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,80:$VB}),o([8,16,24,54,78],[2,81],{62:$Vn,63:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,80:$VB}),o($VJ,[2,85],{67:$Vp,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv}),{16:[1,99],24:$VG},{14:$Vd,15:$Ve,23:100,69:$Vf,79:$Vg,81:$Vh,82:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm},o($VC,[2,84]),{7:103,9:104,14:$VK,18:101,21:116,22:$VL,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7,34:102,35:105,36:106,37:107,38:108,39:109,40:110,41:111,42:112,43:113,44:114,45:$VM,46:$VN,50:$VO,58:$VP,59:$VQ,60:$VR,61:$VS},{17:[1,125]},o($V8,[2,16]),{8:[1,126]},{14:$Vd,15:$Ve,23:127,69:$Vf,79:$Vg,81:$Vh,82:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm},{7:103,9:104,14:$VK,18:128,21:116,22:[1,129],29:$V3,30:$V4,31:$V5,32:$V6,33:$V7,34:102,35:105,36:106,37:107,38:108,39:109,40:110,41:111,42:112,43:113,44:114,45:$VM,46:$VN,50:$VO,58:$VP,59:$VQ,60:$VR,61:$VS},o($VE,[2,13]),{14:$Vd,15:$Ve,23:130,69:$Vf,79:$Vg,81:$Vh,82:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm},o($VC,[2,67]),o($VC,[2,68]),{7:103,9:104,14:$VK,19:[1,131],21:116,22:$VL,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7,34:132,35:105,36:106,37:107,38:108,39:109,40:110,41:111,42:112,43:113,44:114,45:$VM,46:$VN,50:$VO,58:$VP,59:$VQ,60:$VR,61:$VS},o($VT,[2,29]),{8:[1,133]},{8:[1,134]},{8:[1,135]},o($VT,[2,33]),o($VT,[2,34]),o($VT,[2,35]),o($VT,[2,36]),o($VT,[2,37]),o($VT,[2,38]),{8:[1,136]},o($VT,[2,40]),o($VT,[2,41]),{8:$VU,14:$Vd,15:$Ve,23:138,69:$Vf,79:$Vg,81:$Vh,82:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm},{14:[1,139]},{15:[1,140],28:$V9,65:$VV,66:$VW},{15:[1,143]},{15:[1,144]},{15:[1,145]},{15:[1,146]},{17:[1,147]},{62:[1,148]},{15:[1,149]},{7:103,9:104,14:$VK,18:150,21:116,22:$VL,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7,34:102,35:105,36:106,37:107,38:108,39:109,40:110,41:111,42:112,43:113,44:114,45:$VM,46:$VN,50:$VO,58:$VP,59:$VQ,60:$VR,61:$VS},o($V8,[2,17]),o($VE,[2,18],{62:$Vn,63:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,80:$VB}),{7:103,9:104,14:$VK,21:116,22:[1,151],29:$V3,30:$V4,31:$V5,32:$V6,33:$V7,34:132,35:105,36:106,37:107,38:108,39:109,40:110,41:111,42:112,43:113,44:114,45:$VM,46:$VN,50:$VO,58:$VP,59:$VQ,60:$VR,61:$VS},{8:$VU,14:$Vd,15:$Ve,23:152,69:$Vf,79:$Vg,81:$Vh,82:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm},o($VJ,[2,69],{67:$Vp,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv}),o($V8,[2,9]),o($VT,[2,28]),o($VT,[2,30]),o($VT,[2,31]),o($VT,[2,32]),o($VT,[2,39]),o($VT,[2,42]),{8:[1,153],62:$Vn,63:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,80:$VB},{8:$Vb,28:$Vc},{14:$Vd,15:$Ve,16:[1,154],23:69,27:155,69:$Vf,79:$Vg,81:$Vh,82:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm},o($VX,[2,64]),o($VX,[2,65]),{14:$Vd,15:$Ve,23:156,69:$Vf,79:$Vg,81:$Vh,82:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm},{14:$Vd,15:$Ve,23:157,69:$Vf,79:$Vg,81:$Vh,82:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm},{7:158,21:116,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7},{14:$Vd,15:$Ve,23:159,69:$Vf,79:$Vg,81:$Vh,82:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm},{7:103,9:104,14:$VK,18:160,21:116,22:$VL,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7,34:102,35:105,36:106,37:107,38:108,39:109,40:110,41:111,42:112,43:113,44:114,45:$VM,46:$VN,50:$VO,58:$VP,59:$VQ,60:$VR,61:$VS},{21:161,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7},{14:$Vd,15:$Ve,23:162,69:$Vf,79:$Vg,81:$Vh,82:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm},{7:103,9:104,14:$VK,19:[1,163],21:116,22:$VL,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7,34:132,35:105,36:106,37:107,38:108,39:109,40:110,41:111,42:112,43:113,44:114,45:$VM,46:$VN,50:$VO,58:$VP,59:$VQ,60:$VR,61:$VS},{8:$VU,14:$Vd,15:$Ve,23:164,69:$Vf,79:$Vg,81:$Vh,82:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm},{8:[1,165],62:$Vn,63:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,80:$VB},o($VT,$VY),{8:[2,44]},{16:[1,166],24:$VG},{16:[1,167],62:$Vn,63:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,80:$VB},{16:[1,168],62:$Vn,63:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,80:$VB},{8:[1,169]},{16:[1,170],62:$Vn,63:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,80:$VB},{7:103,9:104,14:$VK,19:[1,171],21:116,22:$VL,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7,34:132,35:105,36:106,37:107,38:108,39:109,40:110,41:111,42:112,43:113,44:114,45:$VM,46:$VN,50:$VO,58:$VP,59:$VQ,60:$VR,61:$VS},{63:[1,172]},{16:[1,173],62:$Vn,63:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,80:$VB},o($V8,[2,10]),{8:[1,174],62:$Vn,63:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,80:$VB},o($VZ,$VY,{19:[1,175]}),{8:[1,176]},{8:[1,177]},{17:[1,178]},{14:$Vd,15:$Ve,23:179,69:$Vf,79:$Vg,81:$Vh,82:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm},{17:[1,180]},{59:[1,181]},{14:[1,182]},{17:[1,183]},o($VZ,$VY,{19:[1,184]}),o($V8,[2,12]),o($VT,[2,45]),o($VT,[2,46]),{7:103,9:104,14:$VK,18:185,21:116,22:$VL,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7,34:102,35:105,36:106,37:107,38:108,39:109,40:110,41:111,42:112,43:113,44:114,45:$VM,46:$VN,50:$VO,58:$VP,59:$VQ,60:$VR,61:$VS},{8:[1,186],62:$Vn,63:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,80:$VB},{7:103,9:104,14:$VK,18:187,21:116,22:$VL,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7,34:102,35:105,36:106,37:107,38:108,39:109,40:110,41:111,42:112,43:113,44:114,45:$VM,46:$VN,50:$VO,58:$VP,59:$VQ,60:$VR,61:$VS},{15:[1,188]},{28:[1,189]},{51:190,52:191,53:192,56:$V_,57:$V$},o($V8,[2,11]),{7:103,9:104,14:$VK,19:[1,195],21:116,22:$VL,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7,34:132,35:105,36:106,37:107,38:108,39:109,40:110,41:111,42:112,43:113,44:114,45:$VM,46:$VN,50:$VO,58:$VP,59:$VQ,60:$VR,61:$VS},{14:[1,197],42:196},{7:103,9:104,14:$VK,19:[1,198],21:116,22:$VL,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7,34:132,35:105,36:106,37:107,38:108,39:109,40:110,41:111,42:112,43:113,44:114,45:$VM,46:$VN,50:$VO,58:$VP,59:$VQ,60:$VR,61:$VS},{14:$Vd,15:$Ve,23:199,69:$Vf,79:$Vg,81:$Vh,82:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm},{64:[1,200]},{19:[1,201],52:202,53:192,56:$V_,57:$V$},o($V01,[2,56]),{54:[1,203]},{14:$Vd,15:$Ve,23:204,69:$Vf,79:$Vg,81:$Vh,82:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm},{54:[2,59]},o($VT,[2,47],{48:206,49:207,47:[1,205]}),{16:[1,208]},{65:$VV,66:$VW},o($VT,[2,61]),{16:[1,209],62:$Vn,63:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,80:$VB},{61:[1,210]},o($VT,[2,54]),o($V01,[2,55]),{7:103,9:104,14:$VK,18:211,21:116,22:$VL,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7,34:102,35:105,36:106,37:107,38:108,39:109,40:110,41:111,42:112,43:113,44:114,45:$VM,46:$VN,50:$VO,58:$VP,59:$VQ,60:$VR,61:$VS},{54:[2,58],62:$Vn,63:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,80:$VB},{17:[1,212],46:$V11},o($VT,[2,49],{49:215,47:[1,214]}),o($V21,[2,52]),{17:[1,216]},{8:[1,217]},{62:[1,218]},{7:103,9:104,14:$VK,21:116,22:$VL,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7,34:132,35:105,36:106,37:107,38:108,39:109,40:110,41:111,42:112,43:113,44:114,45:$VM,46:$VN,50:$VO,55:[1,219],58:$VP,59:$VQ,60:$VR,61:$VS},{7:103,9:104,14:$VK,18:220,21:116,22:$VL,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7,34:102,35:105,36:106,37:107,38:108,39:109,40:110,41:111,42:112,43:113,44:114,45:$VM,46:$VN,50:$VO,58:$VP,59:$VQ,60:$VR,61:$VS},{15:[1,221]},{17:[1,222],46:$V11},o($V21,[2,51]),{7:103,9:104,14:$VK,18:223,21:116,22:$VL,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7,34:102,35:105,36:106,37:107,38:108,39:109,40:110,41:111,42:112,43:113,44:114,45:$VM,46:$VN,50:$VO,58:$VP,59:$VQ,60:$VR,61:$VS},o($VT,[2,62]),{21:224,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7},{8:[1,225]},{7:103,9:104,14:$VK,19:[1,226],21:116,22:$VL,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7,34:132,35:105,36:106,37:107,38:108,39:109,40:110,41:111,42:112,43:113,44:114,45:$VM,46:$VN,50:$VO,58:$VP,59:$VQ,60:$VR,61:$VS},{14:$Vd,15:$Ve,23:227,69:$Vf,79:$Vg,81:$Vh,82:$Vi,83:$Vj,84:$Vk,85:$Vl,86:$Vm},{7:103,9:104,14:$VK,18:228,21:116,22:$VL,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7,34:102,35:105,36:106,37:107,38:108,39:109,40:110,41:111,42:112,43:113,44:114,45:$VM,46:$VN,50:$VO,58:$VP,59:$VQ,60:$VR,61:$VS},{7:103,9:104,14:$VK,19:[1,229],21:116,22:$VL,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7,34:132,35:105,36:106,37:107,38:108,39:109,40:110,41:111,42:112,43:113,44:114,45:$VM,46:$VN,50:$VO,58:$VP,59:$VQ,60:$VR,61:$VS},{63:[1,230]},o($V01,[2,57]),o($VT,[2,48]),{16:[1,231],62:$Vn,63:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,80:$VB},{7:103,9:104,14:$VK,19:[1,232],21:116,22:$VL,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7,34:132,35:105,36:106,37:107,38:108,39:109,40:110,41:111,42:112,43:113,44:114,45:$VM,46:$VN,50:$VO,58:$VP,59:$VQ,60:$VR,61:$VS},o($VT,[2,60]),{8:[1,233]},{17:[1,234]},o($VT,[2,50]),o($VT,[2,63]),{7:103,9:104,14:$VK,18:235,21:116,22:$VL,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7,34:102,35:105,36:106,37:107,38:108,39:109,40:110,41:111,42:112,43:113,44:114,45:$VM,46:$VN,50:$VO,58:$VP,59:$VQ,60:$VR,61:$VS},{7:103,9:104,14:$VK,19:[1,236],21:116,22:$VL,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7,34:132,35:105,36:106,37:107,38:108,39:109,40:110,41:111,42:112,43:113,44:114,45:$VM,46:$VN,50:$VO,58:$VP,59:$VQ,60:$VR,61:$VS},o($V21,[2,53])],
defaultActions: {18:[2,1],154:[2,44],194:[2,59]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

        const TIPO_OPERACION= require('./controladores/Enums/TipoOperacion');
        const TIPO_VALOR = require('./controladores/Enums/TipoValor');
        const TIPO_DATO= require('./controladores/Enums/TipoDato');
        const INSTRUCCION = require('./controladores/Instruccion/Instruccion');
    
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1://comentario lineal
break;
case 2:// comentario multiple líneas   
break;
case 3:return 29
break;
case 4:return 30
break;
case 5:return 32
break;
case 6:return 31
break;
case 7:return 33
break;
case 8:return 46
break;
case 9:return 47
break;
case 10:return 50
break;
case 11:return 56
break;
case 12:return 57
break;
case 13:return 55
break;
case 14:return 22
break;
case 15:return 58
break;
case 16:return 59
break;
case 17:return 60
break;
case 18:return 61
break;
case 19:return 13
break;
case 20:return 45
break;
case 21:return 83
break;
case 22:return 84
break;
case 23:return 26
break;
case 24:return 64
break;
case 25:return 81
break;
case 26:return 'punto'
break;
case 27:return 82
break;
case 28:return 80       
break;
case 29:return 76
break;
case 30:return 74
break;
case 31:return 62
break;
case 32:return 75
break;
case 33:return 28
break;
case 34:return 63
break;
case 35:return 24
break;
case 36:return 8
break;
case 37:return 54
break;
case 38:return 68
break;
case 39:return 78
break;
case 40:return 77
break;
case 41:return 17
break;
case 42:return 19
break;
case 43:return 70
break;
case 44:return 71
break;
case 45:return 66
break;
case 46:return 65   
break;
case 47:return 69
break;
case 48:return 67
break;
case 49:return 72
break;
case 50:return 79
break;
case 51:return 73
break;
case 52:return 15
break;
case 53:return 16
break;
case 54:return 'corchA'
break;
case 55:return 'corchC'
break;
case 56:return 14
break;
case 57:return 85
break;
case 58:return 86
break;
case 59:return 5
break;
case 60:
        
        console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);

break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:return\b)/i,/^(?:for\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:list\b)/i,/^(?:void\b)/i,/^(?:print\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:main\b)/i,/^(?:new\b)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:\.)/i,/^(?:[0-9]+\b)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:=)/i,/^(?:>)/i,/^(?:,)/i,/^(?:;)/i,/^(?::)/i,/^(?:\?)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:--)/i,/^(?:\+\+)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:\^)/i,/^(?:!)/i,/^(?:%)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:([a-zA-Z])([a-zA-Z0-9_])*)/i,/^(?:["\""]([^"\""])*["\""])/i,/^(?:["\'"]([^"\'"])*["\'"])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}